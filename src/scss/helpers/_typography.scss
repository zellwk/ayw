// Typography mixins
// -----------------

// Font weight
// -----------
@mixin fw($target, $map: $font-weights) {
  font-weight: map-fetch($font-weights, $target);
}

// Font Family
// -----------
@mixin ff($family, $map: $font-families) {
  font-family: map-get($map, $family);
}

// Responsive Typography
@mixin font-size($fs-map, $breakpoints: $breakpoints) {
  @each $breakpoint, $key in $fs-map {
    @if $breakpoint == null {
      @include make-font-size($key);
    }

    @else if map-has-key($breakpoints, $breakpoint) {
      $breakpoint: map-get($breakpoints, $breakpoint);

      @include bp($breakpoint) {
        @include make-font-size($key);
      }
    }
  }
}

@mixin html-font-size-and-line-height($base-font-map) {
  @each $breakpoint, $key in $base-font-map {
    @if $breakpoint == null {
      @include make-html-sizes($key);
    }

    @else if map-has-key($breakpoints, $breakpoint) {
      $breakpoint: map-get($breakpoints, $breakpoint);

      @include bp($breakpoint) {
        @include make-html-sizes($key);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($key) {
  // If $key is a list, include
  // both font-size and line-height
  @if type-of($key) == 'list' {
    font-size: rem(nth($key, 1));

    @if length($key) > 1 {
      line-height: nth($key, 2);
    }
  }

  @else {
    font-size: rem($key);
  }
}

@mixin make-html-sizes($map) {
  @if type-of($map) == 'list' {
    font-size: nth($map, 1) / 16px * 100%;
    line-height: nth($map, 2);
  }

  @else {
    font-size: $map / 16px * 100%;
  }
}
